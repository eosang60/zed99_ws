// Generated by gencpp from file cone_detection/Cone3d.msg
// DO NOT EDIT!


#ifndef CONE_DETECTION_MESSAGE_CONE3D_H
#define CONE_DETECTION_MESSAGE_CONE3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cone_detection
{
template <class ContainerAllocator>
struct Cone3d_
{
  typedef Cone3d_<ContainerAllocator> Type;

  Cone3d_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , confidence(0.0)
    , class_id(0)  {
    }
  Cone3d_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , confidence(0.0)
    , class_id(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _class_id_type;
  _class_id_type class_id;





  typedef boost::shared_ptr< ::cone_detection::Cone3d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cone_detection::Cone3d_<ContainerAllocator> const> ConstPtr;

}; // struct Cone3d_

typedef ::cone_detection::Cone3d_<std::allocator<void> > Cone3d;

typedef boost::shared_ptr< ::cone_detection::Cone3d > Cone3dPtr;
typedef boost::shared_ptr< ::cone_detection::Cone3d const> Cone3dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cone_detection::Cone3d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cone_detection::Cone3d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cone_detection::Cone3d_<ContainerAllocator1> & lhs, const ::cone_detection::Cone3d_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.confidence == rhs.confidence &&
    lhs.class_id == rhs.class_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cone_detection::Cone3d_<ContainerAllocator1> & lhs, const ::cone_detection::Cone3d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cone_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cone_detection::Cone3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cone_detection::Cone3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cone_detection::Cone3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cone_detection::Cone3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cone_detection::Cone3d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cone_detection::Cone3d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cone_detection::Cone3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76757f15e5ca0d7e1db01bbc3d800bc9";
  }

  static const char* value(const ::cone_detection::Cone3d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76757f15e5ca0d7eULL;
  static const uint64_t static_value2 = 0x1db01bbc3d800bc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cone_detection::Cone3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cone_detection/Cone3d";
  }

  static const char* value(const ::cone_detection::Cone3d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cone_detection::Cone3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 confidence\n"
"int32 class_id\n"
;
  }

  static const char* value(const ::cone_detection::Cone3d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cone_detection::Cone3d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.confidence);
      stream.next(m.class_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cone3d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cone_detection::Cone3d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cone_detection::Cone3d_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONE_DETECTION_MESSAGE_CONE3D_H
